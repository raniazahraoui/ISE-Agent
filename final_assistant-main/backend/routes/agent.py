from flask import Blueprint, request, jsonify,send_from_directory
from flask_jwt_extended import get_jwt_identity, verify_jwt_in_request, get_jwt
import logging
import re
import os
from typing import List, Dict, Optional
import fitz 
import time 
from PIL import Image
import io
import base64

from routes.auth import login
from services.auth_service import AuthService
from agent.assistant import SQLAssistant  
from agent.pdf_utils.attestation import PDFGenerator
from config.database import init_db, get_db, get_db_connection

# Initialize PDF generator
generator = PDFGenerator()

def validate_name(name: str) -> bool:
    """Valide si un nom contient seulement des lettres, espaces, tirets et apostrophes"""
    if not name or not isinstance(name, str):
        return False
    
    # Pattern pour lettres (avec accents), espaces, tirets et apostrophes
    import re
    pattern = r'^[A-Za-z√Ä-√ø\s\-\']+$'
    
    # V√©rifications suppl√©mentaires
    name = name.strip()
    if len(name) < 2 or len(name) > 100:
        return False
    
    # Pas d'espaces multiples ou de caract√®res sp√©ciaux en d√©but/fin
    if re.search(r'\s{2,}|^[\s\-\']|[\s\-\']$', name):
        return False
    
    return bool(re.match(pattern, name))

# Initialize blueprint
agent_bp = Blueprint('agent_bp', __name__)
logger = logging.getLogger(__name__)

# Global assistant instance
assistant = None

def initialize_assistant():
    """Initialize the unified SQL assistant"""
    global assistant
    try:
        assistant = SQLAssistant()
        if assistant and assistant.db:
            logger.info("‚úÖ Assistant unifi√© initialis√© avec succ√®s")
            return True
        else:
            logger.warning("‚ùå Assistant initialis√© mais DB manquante")
            return False
    except Exception as e:
        logger.warning(f"‚ùå Erreur initialisation assistant unifi√©: {e}")
        assistant = None
        return False

# Initialize at import
initialize_assistant()

# Ajout dans la route /ask du fichier agent.py

@agent_bp.route('/ask', methods=['POST'])
def ask_sql():
    """
    Route principale pour les questions SQL avec g√©n√©ration de graphiques
    Utilise le nouvel assistant unifi√© qui combine SQL + IA + graphiques + gestion multi-enfants
    """
    jwt_valid = False
    current_user = None
    jwt_error = None

    # üîç Authentification via JWT
    try:
        if 'Authorization' in request.headers:
            try:
                verify_jwt_in_request(optional=True)
                jwt_identity = get_jwt_identity()
                jwt_claims = get_jwt()

                logger.debug(f"JWT Identity: {jwt_identity}")
                logger.debug(f"JWT Claims: {jwt_claims}")

                if jwt_identity and jwt_claims:
                    current_user = {
                        'sub': jwt_identity,
                        'idpersonne': jwt_claims.get('idpersonne'),
                        'roles': jwt_claims.get('roles', []),
                        'username': jwt_claims.get('username', '')
                    }
                    jwt_valid = True

            except Exception as jwt_exc:
                jwt_error = str(jwt_exc)
                logger.debug(f"Erreur JWT: {jwt_error}")

    except Exception as e:
        jwt_error = str(e)
        logger.debug(f"Erreur g√©n√©rale JWT: {jwt_error}")

    # üß† Traitement de la question
    try:
        if not request.is_json:
            return jsonify({"error": "Content-Type application/json requis"}), 415

        data = request.get_json()
        if not data:
            return jsonify({"error": "Corps de requ√™te JSON vide"}), 400

        # Extraction de la question avec fallback sur plusieurs champs
        question = next((str(data[field]).strip() for field in ['question', 'subject', 'query', 'text', 'message', 'prompt']
                         if field in data and data[field] and str(data[field]).strip()), None)

        if not question:
            return jsonify({
                "error": "Question manquante",
                "expected_fields": ['question', 'subject', 'query', 'text', 'message', 'prompt'],
                "received_fields": list(data.keys())
            }), 422

        # Extraction des informations utilisateur
        user_id = current_user.get('idpersonne') if current_user else None
        roles = current_user.get('roles', []) if current_user else []

        logger.debug(f"user_id: {user_id}, roles: {roles}")

        # V√©rification de l'assistant
        if not assistant:
            if not initialize_assistant():
                return jsonify({
                    "error": "Assistant non disponible",
                    "details": "Impossible d'initialiser l'assistant IA"
                }), 503

        # üßæ Cas sp√©cial : Attestation de pr√©sence
        if "attestation" in question.lower():
            return handle_attestation_request(question)

        

        # ü§ñ Traitement IA principal avec l'assistant unifi√©
        try:
            # üéØ MODIFICATION : R√©cup√©ration de 3 valeurs (sql, response, graph)
            sql_query, ai_response, graph_data = assistant.ask_question(question, user_id, roles)
            
            # üéØ NOUVELLE LOGIQUE : V√©rifier si c'est une demande de clarification multi-enfants
            if not sql_query and ai_response and "plusieurs enfants" in ai_response:
                # C'est une demande de clarification, pas une erreur
                return jsonify({
                    "response": ai_response,
                    "status": "clarification_needed",
                    "question": question,
                    "user_action_required": True,
                    "timestamp": pd.Timestamp.now().isoformat()
                }), 200
            
            if not sql_query:
                return jsonify({
                    "error": "La requ√™te g√©n√©r√©e est vide",
                    "question": question,
                    "status": "error"
                }), 422
            
            # Cr√©ation de la r√©ponse enrichie
            result = {
                "sql_query": sql_query,
                "response": ai_response,
                "status": "success",
                "question": question,
                "timestamp": pd.Timestamp.now().isoformat()
            }
            
            # üéØ AJOUT : Inclure le graphique si g√©n√©r√©
            if graph_data:
                result["graph"] = graph_data
                result["has_graph"] = True
                logger.info("üìä Graphique g√©n√©r√© automatiquement")
            else:
                result["has_graph"] = False

            # Ajouter les informations utilisateur si authentifi√©
            if jwt_valid:
                result["user"] = {
                    "id": current_user.get('idpersonne'),
                    "username": current_user.get('username'),
                    "roles": current_user.get('roles', [])
                }

            # Nettoyage p√©riodique de l'historique des conversations
            if hasattr(assistant, 'cleanup_conversation_history'):
                assistant.cleanup_conversation_history()

            logger.info(f"‚úÖ Question trait√©e avec succ√®s: {question[:50]}...")
            return jsonify(result), 200

        except Exception as processing_error:
            logger.error(f"Erreur traitement question: {processing_error}")
            return jsonify({
                "error": "Erreur de traitement",
                "details": str(processing_error),
                "question": question,
                "status": "error"
            }), 500

    except Exception as e:
        logger.error(f"Erreur g√©n√©rale dans /ask: {e}")
        return jsonify({
            "error": "Erreur serveur interne",
            "details": str(e),
            "status": "error"
        }), 500

# Nouvelle route pour g√©rer les clarifications multi-enfants
@agent_bp.route('/clarify-child', methods=['POST'])
def clarify_child_selection():
    """
    Route sp√©ciale pour g√©rer les clarifications de s√©lection d'enfant
    """
    try:
        if not request.is_json:
            return jsonify({"error": "Content-Type application/json requis"}), 415

        data = request.get_json()
        if not data:
            return jsonify({"error": "Corps de requ√™te JSON vide"}), 400

        # Extraction des param√®tres
        original_question = data.get('original_question', '')
        child_specification = data.get('child_specification', '')  # "Ahmed", "mon fils", "ma grande", etc.
        user_id = data.get('user_id')

        if not all([original_question, child_specification, user_id]):
            return jsonify({
                "error": "Param√®tres manquants",
                "required": ["original_question", "child_specification", "user_id"]
            }), 422

        # Reformuler la question avec la sp√©cification de l'enfant
        clarified_question = f"{original_question} pour {child_specification}"
        
        # Retraiter avec la question clarifi√©e
        roles = ['ROLE_PARENT']  # Assumer parent pour cette route
        sql_query, ai_response, graph_data = assistant.ask_question(clarified_question, user_id, roles)
        
        if not sql_query:
            return jsonify({
                "error": "Impossible de traiter la question clarifi√©e",
                "clarified_question": clarified_question,
                "status": "error"
            }), 422

        # R√©ponse enrichie
        result = {
            "sql_query": sql_query,
            "response": ai_response,
            "status": "success",
            "original_question": original_question,
            "clarified_question": clarified_question,
            "child_specification": child_specification,
            "timestamp": pd.Timestamp.now().isoformat()
        }
        
        if graph_data:
            result["graph"] = graph_data
            result["has_graph"] = True
        else:
            result["has_graph"] = False

        return jsonify(result), 200

    except Exception as e:
        logger.error(f"Erreur clarification enfant: {e}")
        return jsonify({
            "error": "Erreur lors de la clarification",
            "details": str(e),
            "status": "error"
        }), 500

# M√©thode utilitaire pour extraire les informations d'enfant √† partir du texte
def extract_child_context_from_question(question: str, children_data: List[Dict]) -> Optional[Dict]:
    """
    Extrait le contexte sp√©cifique d'un enfant √† partir de la question
    Retourne les informations de l'enfant cibl√© ou None si ambigu√´
    """
    question_lower = question.lower()
    
    # 1. V√©rifier mention directe du pr√©nom
    for child in children_data:
        if child['prenom'].lower() in question_lower:
            return child
    
    # 2. V√©rifier indicateurs de genre
    male_indicators = ['gar√ßon', 'garcon', 'fils', 'mon fils', 'mon gar√ßon']
    female_indicators = ['fille', 'ma fille']
    
    male_children = [child for child in children_data if child.get('genre') == 'M']
    female_children = [child for child in children_data if child.get('genre') == 'F']
    
    for indicator in male_indicators:
        if indicator in question_lower and len(male_children) == 1:
            return male_children[0]
    
    for indicator in female_indicators:
        if indicator in question_lower and len(female_children) == 1:
            return female_children[0]
    
    # 3. V√©rifier indicateurs d'√¢ge
    age_indicators_old = ['grand', 'grande', 'a√Æn√©', 'ainee', 'a√Æn√©e']
    age_indicators_young = ['petit', 'petite', 'cadet', 'cadette', 'benjamin', 'benjamine']
    
    for indicator in age_indicators_old:
        if indicator in question_lower:
            return min(children_data, key=lambda x: x.get('age', 0))
    
    for indicator in age_indicators_young:
        if indicator in question_lower:
            return max(children_data, key=lambda x: x.get('age', 0))
    
    return None

def handle_attestation_request(question: str):
    """G√®re les demandes d'attestation de pr√©sence"""
    try:
        # Extraction du nom
        name_match = re.search(
            r"(?:attestation\s+(?:de|pour)\s+)([A-Za-z√Ä-√ø\s\-\']+)",
            question,
            re.IGNORECASE
        )

        if not name_match:
            return jsonify({
                "response": "Veuillez sp√©cifier un nom complet (ex: 'attestation de Nom Pr√©nom')",
                "status": "info"
            })

        full_name = name_match.group(1).strip()

        if not validate_name(full_name):
            return jsonify({
                "response": "Format de nom invalide. Utilisez uniquement des lettres, espaces, tirets et apostrophes.",
                "status": "error"
            })

        logger.info(f"Recherche √©l√®ve pour attestation : {full_name}")

        # Recherche de l'√©l√®ve via l'assistant unifi√©
        if not assistant:
            return jsonify({
                "response": "Service temporairement indisponible.",
                "status": "error"
            })

        student_data = assistant.get_student_info_by_name(full_name)

        if not student_data:
            return jsonify({
                "response": f"Aucun √©l√®ve trouv√© avec le nom '{full_name}'",
                "status": "not_found"
            })

        # Pr√©paration des donn√©es pour le PDF
        student_data['nom_complet'] = f"{student_data['NomFr']} {student_data['PrenomFr']}"
        student_data['lieu_naissance'] = student_data['lieu_de_naissance']
        student_data['annee_scolaire'] = "2024/2025"

        # G√©n√©ration du PDF
        pdf_result = generator.generate(student_data)
        if pdf_result['status'] != 'success':
            return jsonify({
                "response": "Erreur lors de la g√©n√©ration du document",
                "status": "error"
            })

        pdf_path = pdf_result["path"]
        filename = os.path.basename(pdf_path)
        
        return jsonify({
            "response": (
                f"‚úÖ Attestation g√©n√©r√©e pour {student_data['nom_complet']}\n\n"
                # f"<a href='/static/attestations/{filename}' download>üìÑ T√©l√©charger l'attestation</a>"
            ),
            "pdf_url": f'/download-attestation/{filename}',
            "status": "success",
            "document_type": "attestation"
        })

    except Exception as e:
        logger.error(f"Erreur g√©n√©ration attestation: {str(e)}")
        return jsonify({
            "response": "Erreur lors de la g√©n√©ration du document",
            "status": "error"
        })


@agent_bp.route('/reinit', methods=['POST'])
def reinitialize():
    """R√©initialise l'assistant unifi√©"""
    try:
        success = initialize_assistant()
        
        message = "R√©initialisation r√©ussie" if success else "√âchec de la r√©initialisation"
        
        # Ajouter des informations de diagnostic
        diagnostic_info = {}
        if assistant:
            diagnostic_info = {
                "db_connected": assistant.db is not None,
                "schema_loaded": len(assistant.schema) > 0,
                "templates_loaded": len(assistant.templates_questions),
                "cache_available": assistant.cache is not None
            }
        
        return jsonify({
            "success": success,
            "message": message,
            "diagnostic": diagnostic_info,
            "timestamp": pd.Timestamp.now().isoformat()
        }), 200 if success else 500
        
    except Exception as e:
        logger.error(f"Erreur r√©initialisation: {e}")
        return jsonify({
            "success": False,
            "error": str(e),
            "timestamp": pd.Timestamp.now().isoformat()
        }), 500

@agent_bp.route('/status', methods=['GET'])
def get_assistant_status():
    """Retourne le statut de l'assistant unifi√©"""
    try:
        if not assistant:
            return jsonify({
                "status": "not_initialized",
                "message": "Assistant non initialis√©"
            }), 503
        
        status_info = {
            "status": "active",
            "db_connected": assistant.db is not None,
            "schema_tables": len(assistant.schema),
            "templates_count": len(assistant.templates_questions),
            "conversation_history_size": len(assistant.conversation_history),
            "cache_available": {
                "admin_cache": assistant.cache is not None,
                "parent_cache": assistant.cache1 is not None
            },
            "model_config": {
                "model": assistant.model,
                "temperature": assistant.temperature,
                "max_tokens": assistant.max_tokens
            },
            "last_sql": assistant.last_generated_sql[:100] if assistant.last_generated_sql else None,
            "timestamp": pd.Timestamp.now().isoformat()
        }
        
        return jsonify(status_info), 200
        
    except Exception as e:
        logger.error(f"Erreur statut: {e}")
        return jsonify({
            "status": "error",
            "error": str(e),
            "timestamp": pd.Timestamp.now().isoformat()
        }), 500

@agent_bp.route('/clear-history', methods=['POST'])
def clear_conversation_history():
    """Efface l'historique des conversations"""
    try:
        if not assistant:
            return jsonify({
                "success": False,
                "message": "Assistant non initialis√©"
            }), 503
        
        # Effacer l'historique
        if hasattr(assistant, 'reset_conversation'):
            assistant.reset_conversation()
        
        return jsonify({
            "success": True,
            "message": "Historique des conversations effac√©",
            "timestamp": pd.Timestamp.now().isoformat()
        }), 200
        
    except Exception as e:
        logger.error(f"Erreur effacement historique: {e}")
        return jsonify({
            "success": False,
            "error": str(e),
            "timestamp": pd.Timestamp.now().isoformat()
        }), 500

@agent_bp.route('/graph', methods=['POST'])
def generate_graph_only():
    """
    Endpoint d√©di√© pour g√©n√©rer uniquement des graphiques
    √† partir de donn√©es fournies
    """
    try:
        if not request.is_json:
            return jsonify({"error": "Content-Type application/json requis"}), 415

        data = request.get_json()
        
        # Validation des donn√©es requises
        if 'data' not in data or not isinstance(data['data'], list):
            return jsonify({
                "error": "Donn√©es manquantes",
                "message": "Le champ 'data' contenant une liste est requis"
            }), 422
        
        # Param√®tres optionnels
        graph_type = data.get('graph_type', None)  # 'bar', 'line', 'pie'
        title = data.get('title', 'Graphique')
        
        if not assistant:
            return jsonify({
                "error": "Assistant non disponible"
            }), 503
        
        # Cr√©er DataFrame √† partir des donn√©es
        import pandas as pd
        df = pd.DataFrame(data['data'])
        
        if df.empty:
            return jsonify({
                "error": "Donn√©es vides",
                "message": "Impossible de cr√©er un graphique avec des donn√©es vides"
            }), 422
        
        # G√©n√©rer le graphique
        graph_data = assistant.generate_auto_graph(df, graph_type)
        
        if not graph_data:
            return jsonify({
                "error": "Impossible de g√©n√©rer le graphique",
                "message": "Les donn√©es ne sont pas adapt√©es pour la g√©n√©ration de graphique"
            }), 422
        
        return jsonify({
            "success": True,
            "graph": graph_data,
            "graph_type": graph_type or "auto-detected",
            "data_points": len(df),
            "columns": df.columns.tolist(),
            "timestamp": pd.Timestamp.now().isoformat()
        }), 200
        
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration graphique: {e}")
        return jsonify({
            "error": "Erreur lors de la g√©n√©ration du graphique",
            "details": str(e),
            "timestamp": pd.Timestamp.now().isoformat()
        }), 500
@agent_bp.route('/static/images/<path:filename>')
def serve_image(filename):
    """
    Sert les images de pr√©visualisation des PDF ou les convertit √† la vol√©e
            """
    try:
        # Construire le chemin de l'image
        image_path = os.path.join('static', 'images', filename)
        
        # Si l'image existe d√©j√†, la servir directement
        if os.path.exists(image_path):
            logger.info(f"‚úÖ Image trouv√©e: {image_path}")
            return send_from_directory("static/images", filename)
        
        # Sinon, essayer de la g√©n√©rer depuis le PDF correspondant
        logger.info(f"üîÑ G√©n√©ration image √† la vol√©e pour: {filename}")
        
        # Construire le chemin du PDF original
        pdf_filename = filename.replace('.png', '.pdf').replace('.jpg', '.pdf')
        pdf_path = os.path.join('static', 'attestations', pdf_filename)
        
        if not os.path.exists(pdf_path):
            logger.warning(f"‚ùå PDF source non trouv√©: {pdf_path}")
            return jsonify({'error': 'PDF source non trouv√©'}), 404
        
        # Cr√©er le dossier images s'il n'existe pas
        os.makedirs(os.path.dirname(image_path), exist_ok=True)
        
        # Convertir PDF en image
        logger.info(f"üñºÔ∏è Conversion PDF -> PNG: {pdf_path} -> {image_path}")
        pdf_document = fitz.open(pdf_path)
        page = pdf_document[0]  # Premi√®re page
        
        # Rendu en image (r√©solution 200 DPI pour bonne qualit√© mobile)
        matrix = fitz.Matrix(200/72, 200/72)  # 200 DPI
        pix = page.get_pixmap(matrix=matrix)
        
        # Sauvegarder l'image
        pix.save(image_path)
        pdf_document.close()
        
        logger.info(f"‚úÖ Image g√©n√©r√©e avec succ√®s: {image_path}")
        
        # Servir l'image nouvellement cr√©√©e
        return send_from_directory("static/images", filename)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur conversion PDF vers image: {e}")
        # Fallback: servir une image par d√©faut ou erreur 404
        return jsonify({'error': f'Erreur g√©n√©ration image: {str(e)}'}), 500


# Endpoint pour g√©n√©rer des attestations
@agent_bp.route('/generate-attestation/<student_name>', methods=['GET'])
def generate_attestation_endpoint(student_name):
    """Endpoint d√©di√© pour g√©n√©rer des attestations"""
    try:
        if not assistant:
            return jsonify({"error": "Assistant non disponible"}), 503
        
        # R√©cup√©rer les infos de l'√©tudiant
        student_data = assistant.get_student_info_by_name(student_name)
        if not student_data:
            return jsonify({"error": f"Aucun √©l√®ve trouv√© avec le nom '{student_name}'"}), 404
        
        # Pr√©parer les donn√©es
        student_data['nom_complet'] = f"{student_data['NomFr']} {student_data['PrenomFr']}"
        student_data['classe'] = student_data.get('classe', 'Classe non pr√©cis√©e')
        student_data['lieu_naissance'] = student_data.get('lieu_de_naissance', 'Non pr√©cis√©')
        student_data['annee_scolaire'] = "2024/2025"
        
        # G√©n√©rer le PDF
        pdf_result = generator.generate(student_data)
        if pdf_result['status'] != 'success':
            return jsonify({"error": "Erreur lors de la g√©n√©ration du PDF"}), 500
        
        return jsonify({
            "success": True,
            "message": f"Attestation g√©n√©r√©e pour {student_name}",
            "pdf_url": f"/download-attestation/{pdf_result['filename']}",
            "filename": pdf_result['filename']
        })
        
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration attestation: {e}")
        return jsonify({"error": f"Erreur interne: {str(e)}"}), 500
    
@agent_bp.route('/download-attestation/<filename>')
def download_attestation(filename):
    try:
        return send_from_directory(
            os.path.abspath('static/attestations'),
            filename,
            as_attachment=True
        )
    except FileNotFoundError:
        return jsonify({"error": "Fichier non trouv√©"}), 404



@agent_bp.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint pour v√©rifier que le service fonctionne"""
    try:
        health_status = {
            "status": "healthy",
            "timestamp": pd.Timestamp.now().isoformat(),
            "services": {
                "assistant": assistant is not None,
                "database": False,
                "cache": False
            }
        }
        
        # Test de la base de donn√©es
        if assistant and assistant.db:
            try:
                # Test simple de connectivit√©
                result = assistant.execute_sql_query("SELECT 1")
                health_status["services"]["database"] = result["success"]
            except:
                health_status["services"]["database"] = False
        
        # Test du cache
        if assistant:
            health_status["services"]["cache"] = (
                assistant.cache is not None and 
                assistant.cache1 is not None
            )
        
        # D√©terminer le statut global
        all_services_ok = all(health_status["services"].values())
        if not all_services_ok:
            health_status["status"] = "degraded"
        
        status_code = 200 if all_services_ok else 503
        return jsonify(health_status), status_code
        
    except Exception as e:
        logger.error(f"Erreur health check: {e}")
        return jsonify({
            "status": "unhealthy",
            "error": str(e),
            "timestamp": pd.Timestamp.now().isoformat()
        }), 503



import pandas as pd